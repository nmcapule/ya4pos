{"version":3,"sources":["screens/navigation.ts","screens/sandbox/Hello.tsx","utils/config.ts","utils/server.ts","services/authentication.ts","screens/account/Login.tsx","services/warehouse.ts","screens/pos/POS.tsx","screens/pos/Review.tsx","App.tsx"],"names":["linking","prefixes","config","screens","Hello","Login","POS","Review","HelloScreen","navigation","style","styles","container","Text","Button","mode","onPress","navigate","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","api","path","init","res","fetch","Object","assign","method","credentials","headers","Accept","status","Error","text","json","AuthenticationService","username","password","body","JSON","stringify","service","console","log","login","LoginScreen","useState","setUsername","setPassword","useEffect","verify","TextInput","placeholder","value","onChangeText","secureTextEntry","submit","e","error","padding","marginTop","WarehouseService","params","URLSearchParams","toString","id","POSScreen","stocks","setStocks","orders","setOrders","tags","setTags","Set","selectedTags","setSelectedTags","renderQuantity","stock","count","icon","expand","item","Chip","Stocks","filter","map","flat","tag","Boolean","reduce","values","Array","from","selected","has","tagId","delete","add","label","ScrollView","size","every","includes","title","description","unitPrice","addOrder","onLongPress","confirm","clearOrder","left","props","right","FAB","fab","flexDirection","overflow","margin","position","bottom","ReviewScreen","route","stocksLookup","setStocksLookup","lookup","DataTable","Header","Title","labelCell","numeric","entries","Row","Cell","sum","spacer","flexGrow","RootStack","createNativeStackNavigator","App","NavigationContainer","Navigator","initialRouteName","screenOptions","animation","Screen","name","component"],"mappings":"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","file":"static/js/app.9cec879a.chunk.js","sourcesContent":["import { LinkingOptions } from \"@react-navigation/native\";\n\n// TODO(nmcapule): I don't know how to use this :P\nexport type RootStackParamList = {\n    Hello: undefined;\n    Login: undefined;\n    POS: undefined;\n    Review: {\n        orders: Record<string, number>;\n    };\n};\n\nexport const linking: LinkingOptions<ReactNavigation.RootParamList> = {\n    prefixes: [\n        \"https://nmcapule-literate-parakeet-j4qvr9vv4xc5pgj-19006.preview.app.github.dev\",\n        \"http://nmcapule.github.dev/ya4pos\",\n    ],\n    config: {\n        screens: {\n            Hello: \"./hello\",\n            Login: \"./login\",\n            POS: \"./pos\",\n            Review: \"./review\",\n        },\n    },\n};\n","import { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { Button } from \"react-native-paper\";\n\nimport { RootStackParamList } from \"../navigation\";\n\nexport default function HelloScreen({\n    navigation,\n}: NativeStackScreenProps<RootStackParamList, \"Hello\">) {\n    return (\n        <View style={styles.container}>\n            <Text>Open up App.tsx to start working on your app!</Text>\n            <Button\n                mode=\"outlined\"\n                onPress={() => navigation.navigate(\"Login\")}\n            >\n                Go to Login\n            </Button>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: \"#fff\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n});\n","export default {\n    SERVER_URL: \"https://ya4pos.fly.dev\",\n};\n","import config from \"./config\";\n\nexport async function api<T = unknown>(\n    path: string,\n    init?: RequestInit\n): Promise<T> {\n    const res = await fetch(\n        `${config.SERVER_URL}${path}`,\n        Object.assign(\n            {\n                method: \"GET\",\n                mode: \"cors\",\n                credentials: \"include\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                },\n            },\n            init\n        )\n    );\n    if (res.status >= 400) {\n        throw new Error(await res.text());\n    }\n    return res.json() as T;\n}\n","import { User } from \"../models\";\nimport { api } from \"../utils/server\";\n\nexport class AuthenticationService {\n    async verify() {\n        return await api<User>(\"/api/v1/authentication\", {\n            method: \"GET\",\n        });\n    }\n    async login(username: string, password: string) {\n        return await api(\"/api/v1/authentication\", {\n            method: \"POST\",\n            body: JSON.stringify({ username, password }),\n        });\n    }\n}\n","import type { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport { useEffect, useState } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport { Button, TextInput } from \"react-native-paper\";\n\nimport type { RootStackParamList } from \"../navigation\";\nimport { AuthenticationService } from \"../../services/authentication\";\n\nasync function login(username: string, password: string) {\n    const service = new AuthenticationService();\n    console.log(await service.login(username, password));\n}\n\nexport default function LoginScreen({\n    navigation,\n}: NativeStackScreenProps<RootStackParamList, \"Hello\">) {\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n\n    useEffect(() => {\n        const service = new AuthenticationService();\n        (async () => {\n            const user = await service.verify();\n            if (user) {\n                navigation.navigate(\"POS\");\n            }\n        })();\n    });\n\n    return (\n        <View style={styles.container}>\n            <TextInput\n                mode=\"outlined\"\n                placeholder=\"Username\"\n                value={username}\n                onChangeText={setUsername}\n            ></TextInput>\n            <TextInput\n                mode=\"outlined\"\n                placeholder=\"Password\"\n                secureTextEntry={true}\n                value={password}\n                onChangeText={setPassword}\n            ></TextInput>\n            <Button\n                mode=\"outlined\"\n                style={styles.submit}\n                onPress={async () => {\n                    try {\n                        await login(username, password);\n                    } catch (e: unknown) {\n                        console.error(e);\n                    }\n                    navigation.navigate(\"POS\");\n                }}\n            >\n                Submit\n            </Button>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: \"#fff\",\n        alignItems: \"stretch\",\n        justifyContent: \"center\",\n        padding: \"5%\",\n    },\n    submit: {\n        marginTop: \"8pt\",\n    },\n});\n","import type { Warehouse, WarehouseStock } from \"../models\";\nimport { api } from \"../utils/server\";\n\nexport class WarehouseService {\n    async List(params = new URLSearchParams()) {\n        return await api<Warehouse[]>(\n            `/api/v1/warehouses?${params?.toString()}`\n        );\n    }\n\n    async View(id: string, params = new URLSearchParams()) {\n        return await api<Warehouse[]>(\n            `/api/v1/warehouses/${id}?${params?.toString()}`\n        );\n    }\n\n    async Stocks(id: string, params = new URLSearchParams()) {\n        return await api<WarehouseStock[]>(\n            `/api/v1/warehouses/${id}/stocks?${params?.toString()}`\n        );\n    }\n}\n","import { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport { useEffect, useState } from \"react\";\nimport { ScrollView, StyleSheet, View } from \"react-native\";\nimport { Chip, FAB, List, Text } from \"react-native-paper\";\n\nimport type { Tag, WarehouseStock } from \"../../models\";\nimport type { RootStackParamList } from \"../navigation\";\nimport { WarehouseService } from \"../../services/warehouse\";\n\nconst HARDCODED_WAREHOUSE_ID = \"ffcf67ob673v8p0\";\n\nexport default function POSScreen({\n    navigation,\n}: NativeStackScreenProps<RootStackParamList, \"POS\">) {\n    const [stocks, setStocks] = useState<WarehouseStock[]>([]);\n    const [orders, setOrders] = useState<Record<string, number>>({});\n    const [tags, setTags] = useState<Tag[]>([]);\n    const [selectedTags, setSelectedTags] = useState<Set<string>>(new Set());\n\n    const addOrder = (stock: WarehouseStock) =>\n        setOrders({ ...orders, [stock.id!]: (orders[stock.id!] ?? 0) + 1 });\n    const clearOrder = (stock: WarehouseStock) =>\n        confirm(`Clear all current orders for ${stock.expand?.item.label}?`) &&\n        setOrders({ ...orders, [stock.id!]: 0 });\n    const reviewOrders = () => navigation.navigate(\"Review\", { orders });\n\n    const renderQuantity = (stock: WarehouseStock) => {\n        const count = orders[stock.id!] ?? 0;\n        if (count === 0) {\n            return \"\";\n        }\n        const icon = stock.expand?.item.icon;\n        return <Chip mode=\"outlined\" icon={icon}>{`x${count}`}</Chip>;\n    };\n\n    const toggleSelectedTag = (tagId: string) => {\n        if (selectedTags.has(tagId)) {\n            selectedTags.delete(tagId);\n        } else {\n            selectedTags.add(tagId);\n        }\n        setSelectedTags(new Set(selectedTags));\n    };\n\n    useEffect(() => {\n        const service = new WarehouseService();\n        (async () => {\n            const stocks = await service.Stocks(\n                HARDCODED_WAREHOUSE_ID,\n                new URLSearchParams({\n                    filter: `sellable=true`,\n                    expand: `item.tags`,\n                })\n            );\n            const tags = stocks\n                .map((stock) => stock.expand?.item.expand?.tags as Tag[])\n                .flat()\n                .filter((tag) => Boolean(tag))\n                .reduce(\n                    (tags, tag) => ({ ...tags, [tag.id!]: tag }),\n                    {} as Record<string, Tag>\n                );\n\n            setStocks(stocks);\n            setTags(Object.values(tags));\n        })();\n    }, []);\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.tags}>\n                {Array.from(tags).map((tag) => (\n                    <Chip\n                        mode=\"outlined\"\n                        style={styles.tag}\n                        key={tag.id}\n                        selected={selectedTags.has(tag.id!)}\n                        onPress={() => toggleSelectedTag(tag.id!)}\n                    >\n                        {tag.label}\n                    </Chip>\n                ))}\n            </View>\n            <ScrollView>\n                {stocks\n                    .filter((stock) => {\n                        if (selectedTags.size === 0) return true;\n                        const tags = stock.expand?.item.tags;\n                        return Array.from(selectedTags).every((tag) =>\n                            tags.includes(tag)\n                        );\n                    })\n                    .map((stock) => (\n                        <List.Item\n                            key={stock.id}\n                            title={stock.expand?.item.label}\n                            style={styles.item}\n                            description={`PHP ${stock.unitPrice}\\n${stock.expand?.item.description}`}\n                            onPress={() => addOrder(stock)}\n                            onLongPress={() => clearOrder(stock)}\n                            left={(props) => (\n                                <List.Icon\n                                    {...props}\n                                    icon={stock.expand?.item.icon}\n                                />\n                            )}\n                            right={(props) => (\n                                <Text {...props}>{renderQuantity(stock)}</Text>\n                            )}\n                        />\n                    ))}\n            </ScrollView>\n            <FAB\n                style={styles.fab}\n                icon=\"checkbox-marked-circle-plus-outline\"\n                onPress={() => reviewOrders()}\n            />\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n    },\n    tags: {\n        flexDirection: \"row\",\n        overflow: \"scroll\",\n    },\n    tag: {\n        margin: \".2em\",\n    },\n    item: {\n        backgroundColor: \"#fcfcfc\",\n    },\n    fab: {\n        position: \"absolute\",\n        margin: 16,\n        right: 0,\n        bottom: 0,\n    },\n});\n","import { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport { useEffect, useState } from \"react\";\nimport { ScrollView, StyleSheet, View } from \"react-native\";\nimport { Button, DataTable } from \"react-native-paper\";\n\nimport { WarehouseStock } from \"../../models\";\nimport { WarehouseService } from \"../../services/warehouse\";\nimport { RootStackParamList } from \"../navigation\";\n\nconst HARDCODED_WAREHOUSE_ID = \"ffcf67ob673v8p0\";\n\nexport default function ReviewScreen({\n    route,\n}: NativeStackScreenProps<RootStackParamList, \"POS\">) {\n    const [stocksLookup, setStocksLookup] = useState<\n        Record<string, WarehouseStock>\n    >({});\n\n    const { orders }: { orders: Record<string, number> } = route.params!;\n\n    useEffect(() => {\n        const service = new WarehouseService();\n        (async () => {\n            const stocks = await service.Stocks(\n                HARDCODED_WAREHOUSE_ID,\n                new URLSearchParams({\n                    filter: `sellable=true`,\n                    expand: `item.tags`,\n                })\n            );\n            setStocksLookup(\n                stocks.reduce(\n                    (lookup, stock) => ({ ...lookup, [stock.id!]: stock }),\n                    {} as Record<string, WarehouseStock>\n                )\n            );\n        })();\n    }, []);\n\n    return (\n        <View style={styles.container}>\n            <ScrollView>\n                <DataTable>\n                    <DataTable.Header>\n                        <DataTable.Title style={styles.labelCell}>\n                            Item\n                        </DataTable.Title>\n                        <DataTable.Title numeric>Quantity</DataTable.Title>\n                        <DataTable.Title numeric>Total Price</DataTable.Title>\n                    </DataTable.Header>\n                    {Object.entries(orders)\n                        .map(([id, count]): [WarehouseStock, number] => [\n                            stocksLookup[id!],\n                            count,\n                        ])\n                        .filter(([stock, _]) => Boolean(stock))\n                        .map(([stock, count]) => (\n                            <DataTable.Row key={stock.id}>\n                                <DataTable.Cell style={styles.labelCell}>\n                                    {stock.expand?.item.label}\n                                </DataTable.Cell>\n                                <DataTable.Cell numeric>{count}</DataTable.Cell>\n                                <DataTable.Cell numeric>\n                                    PHP {count * stock.unitPrice!}\n                                </DataTable.Cell>\n                            </DataTable.Row>\n                        ))}\n                    <DataTable.Row>\n                        <DataTable.Cell style={styles.labelCell}>\n                            Total\n                        </DataTable.Cell>\n                        <DataTable.Cell numeric>--</DataTable.Cell>\n                        <DataTable.Cell numeric>\n                            PHP{\" \"}\n                            {Object.entries(orders)\n                                .map(\n                                    ([id, count]): [WarehouseStock, number] => [\n                                        stocksLookup[id!] ?? {},\n                                        count,\n                                    ]\n                                )\n                                .reduce(\n                                    (sum, [stock, count]) =>\n                                        sum + count * stock.unitPrice!,\n                                    0\n                                )}\n                        </DataTable.Cell>\n                    </DataTable.Row>\n                </DataTable>\n            </ScrollView>\n            <View style={styles.spacer}></View>\n            <Button style={styles.submit} mode=\"outlined\">\n                Confirm Order\n            </Button>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: \"#fcfcfc\",\n        flex: 1,\n    },\n    labelCell: {\n        flexGrow: 2,\n    },\n    spacer: {\n        flexGrow: 1,\n    },\n    submit: {\n        margin: \".5em\",\n    },\n});\n","import { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\n\nimport { linking, RootStackParamList } from \"./screens/navigation\";\n\nimport HelloScreen from \"./screens/sandbox/Hello\";\nimport LoginScreen from \"./screens/account/Login\";\nimport POSScreen from \"./screens/pos/POS\";\nimport ReviewScreen from \"./screens/pos/Review\";\n\nconst RootStack = createNativeStackNavigator<RootStackParamList>();\n\nexport default function App() {\n    return (\n        <NavigationContainer linking={linking}>\n            <RootStack.Navigator\n                initialRouteName=\"Hello\"\n                screenOptions={{ animation: \"none\" }}\n            >\n                <RootStack.Screen name=\"Hello\" component={HelloScreen} />\n                <RootStack.Screen name=\"Login\" component={LoginScreen} />\n                <RootStack.Screen name=\"POS\" component={POSScreen} />\n                <RootStack.Screen name=\"Review\" component={ReviewScreen} />\n            </RootStack.Navigator>\n        </NavigationContainer>\n    );\n}\n"],"sourceRoot":""}